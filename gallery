#!/usr/bin/env python3
import argparse
import collections
import glob
import os
import random
import re
import sys

RX_TAG = re.compile(r'^[a-zA-Z0-9_-]+$')
RX_IMAGE_ROOT = re.compile(r'^[a-zA-Z0-9_-]+$')
RX_ROOT = re.compile(r'^([a-zA-Z0-9_-]+)\.')
IMAGE_SUFFIXES = ['.jpg', '.gif', '.png']
MOVIE_SUFFIXES = ['.mp4']
IMAGE_HEIGHT = '380px'


def is_image(path):
    lower_path = path.lower()
    for suffix in IMAGE_SUFFIXES:
        if lower_path.endswith(suffix):
            return True
    return False


def find_image_paths(image_dir, root):
    for suffix in IMAGE_SUFFIXES:
        paths = glob.glob('{}/{}{}'.format(image_dir, root, suffix))
        if paths:
            return paths

    return []


def path_to_root(path):
    lower_path = path.lower()
    basename = os.path.basename(lower_path)
    md = RX_ROOT.search(basename)
    if md:
        root = md.groups()[0]
        return root

    return None


def find_movie_path(basename):
    for suffix in MOVIE_SUFFIXES:
        movie_path = basename + suffix
        if os.path.exists(movie_path):
            return movie_path

    return None


def image_html(image_dir, path, num_to_tags):
    root = path_to_root(path)
    if root:
        if is_image(path):
            tags = set(num_to_tags.get(root, []))
            tag_links = ['<a href="{}">{}</a>'.format(os.path.join(image_dir, '.gallery', '{}.html'.format(tag)), tag)
                         for tag
                         in tags]
            movie_path = find_movie_path(root)
            return '<table style="display:inline-table;"><tr><td><a href="{}"><img src="{}" height="{}"></a><tr><td>{}</table>\n'.format(
                movie_path or path,
                path,
                IMAGE_HEIGHT,
                ' '.join(tag_links))


def tag_roots(tag, paths):
    if not RX_TAG.match(tag):
        raise Exception('invalid tag: {}'.format(tag))
    for path in paths:
        image_dir = os.path.dirname(path) or '.'
        base_path = os.path.basename(path)
        if '.' in base_path:
            root, _sep, _suffix = base_path.rpartition('.')
        else:
            root = base_path
        if find_image_paths(image_dir, root):
            tags_dir = os.path.join(image_dir, '.tags')
            if not os.path.exists(tags_dir):
                os.makedirs(tags_dir)
            tag_path = os.path.join(tags_dir, tag)
            with open(tag_path, 'a') as f:
                f.write('{}\n'.format(root))
        else:
            sys.stderr.write('does not have image suffix: {}\n'.format(path))


def load_tags(image_dir):
    tags_dir = os.path.join(image_dir, '.tags')
    if not os.path.exists(tags_dir):
        os.makedirs(tags_dir)
    tag_to_nums = collections.defaultdict(list)
    num_to_tags = collections.defaultdict(list)
    tag_to_paths = collections.defaultdict(list)
    for tag in os.listdir(tags_dir):
        with open(os.path.join(tags_dir, tag)) as f:
            for line in f:
                stripped = line.strip()
                md = RX_IMAGE_ROOT.search(stripped)
                if md:
                    tag_to_nums[tag].append(stripped)
                    num_to_tags[stripped].append(tag)

    for tag, nums in tag_to_nums.items():
        for num in nums:
            for path in find_image_paths(image_dir, num):
                tag_to_paths[tag].append(path)

    return num_to_tags, tag_to_paths


def gallery_of_directories(directory_of_directories):
    with open('{}/index.html'.format(directory_of_directories), 'w') as f:
        f.write('<ul>\n')
        paths = glob.glob('{}/*'.format(directory_of_directories))
        for path in paths:
            basepath = os.path.basename(path)
            if os.path.isdir(path):
                f.write('<li><a href="./{}/index.html">{}</a>\n'.format(basepath, basepath))
        f.write('</ul>\n')


def gallery(image_dir, sort_images=False):
    num_to_tags, tag_to_path = load_tags(image_dir)

    with open('{}/index.html'.format(image_dir), 'w') as f:
        f.write('<p style="display:inline-table;">\n')
        paths = glob.glob('{}/*.???'.format(image_dir))
        if sort_images:
            paths.sort()
        else:
            random.shuffle(paths)
        for path in paths:
            html = image_html(image_dir, path, num_to_tags)
            if html:
                f.write(html)

    gallery_dir = os.path.join(image_dir, '.gallery')
    if not os.path.exists(gallery_dir):
        os.makedirs(gallery_dir)
    for tag, paths in tag_to_path.items():
        with open('{}/{}.html'.format(gallery_dir, tag), 'w') as f:
            for path in set(paths):
                lower_path = path.lower()
                basename = os.path.basename(lower_path)
                md = RX_ROOT.search(basename)
                if md:
                    root = md.groups()[0]
                    if lower_path.endswith('.jpg') or lower_path.endswith('.gif') or lower_path.endswith('.png'):
                        tags = set(num_to_tags.get(root, []))
                        tag_links = ['<a href="../index.html">all</a>']
                        tag_links.extend(['<a href="../{}">{}</a>'.format(os.path.join(image_dir, '.gallery', '{}.html'.format(tag)), tag)
                                          for tag
                                          in tags])
                        f.write('<table style="display:inline-table;"><tr><td><a href="../{}"><img src="../{}" height="{}"></a><tr><td>{}</table>\n'.format(
                            path,
                            path,
                            IMAGE_HEIGHT,
                            ' '.join(tag_links)))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--gallery-of-directories', '-D',
                        dest='gallery_of_directories',
                        action='store_true')
    parser.add_argument('--tag', '-t',
                        dest='tag')
    parser.add_argument('--sort', '-s', dest='sort', action='store_true')
    args = parser.add_argument('paths', nargs='*')
    args = parser.parse_args()
    if args.gallery_of_directories:
        gallery_of_directories(args.paths[0])
    elif args.tag:
        tag_roots(args.tag, args.paths)
    else:
        if len(args.paths) != 1:
            raise Exception('USAGE: gallery IMAGE_DIR')
        gallery(args.paths[0], sort_images=args.sort)
